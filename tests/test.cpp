#include <iostream>
#include <unordered_map>
#include <vector>
#include <Eigen/Dense>
#include <cmath>

using namespace Eigen;

// Function to perform linear regression and compute p-value, beta coefficients, and standard errors
void linear_regression(
    const std::unordered_map<std::string, std::vector<int>>& df,
    const std::unordered_map<std::string, double>& quantitative_phenotype) {
    
    if (df.empty() || quantitative_phenotype.empty()) {
        std::cerr << "Error: Empty dataset provided." << std::endl;
        return;
    }
    
    size_t num_samples = df.size();
    size_t max_paths = 0;
    for (const auto& [sample, paths] : df) {
        if (paths.size() > max_paths) {
            max_paths = paths.size();
        }
    }
    
    MatrixXd X(num_samples, max_paths);
    X.setZero(); // Initialize matrix with zeros
    VectorXd y(num_samples);
    
    int row = 0;
    for (const auto& [sample, paths] : df) {
        if (quantitative_phenotype.find(sample) == quantitative_phenotype.end()) {
            std::cerr << "Error: Sample " << sample << " not found in phenotype data." << std::endl;
            return;
        }
        y(row) = quantitative_phenotype.at(sample);
        for (size_t col = 0; col < paths.size(); ++col) {
            X(row, col) = paths[col];
        }
        row++;
    }
    
    VectorXd beta = (X.transpose() * X).ldlt().solve(X.transpose() * y);
    
    VectorXd y_pred = X * beta;
    VectorXd residuals = y - y_pred;
    
    double rss = residuals.squaredNorm();
    double tss = (y.array() - y.mean()).matrix().squaredNorm();
    double r2 = 1 - (rss / tss);
    
    // Compute standard errors
    MatrixXd cov_matrix = (X.transpose() * X).inverse();
    VectorXd se = residuals.squaredNorm() / (num_samples - max_paths) * cov_matrix.diagonal().array().sqrt().matrix();
    
    // Compute F-statistic
    int df_reg = max_paths - 1;
    int df_res = num_samples - max_paths;
    if (df_res <= 0) {
        std::cerr << "Error: Degrees of freedom for residuals must be positive." << std::endl;
        return;
    }
    
    double f_stat = (r2 / df_reg) / ((1 - r2) / df_res);
    
    // Compute p-value using an approximation (F-distribution p-value calculation can be done using statistical libraries)
    double p_value = std::exp(-0.5 * f_stat);
    
    // Output results
    std::cout << "P-value: " << p_value << std::endl;
    std::cout << "Beta Coefficients: \n" << beta.mean() << std::endl;
    std::cout << "Standard Errors: \n" << se.mean() << std::endl;
}

// Main function with example usage
int main() {
    // Example usage with existing data structures
    // This is just for illustration - in your project, you"d use your existing data
    
    // Sample data for testing
    std::unordered_map<std::string, double> phenotype = {{"samp_0", -0.4064827580686559}, {"samp_1", 0.1734451051616927}, {"samp_2", 1.5995975944171714}, {"samp_3", -0.2206504095178102}, {"samp_4", 0.7688996393785938}, {"samp_5", -0.0512201374033371}, {"samp_6", -0.0625632265062427}, {"samp_7", 0.0542723848301986}, {"samp_8", -0.6520572901974214}, {"samp_9", 0.8154896340516702}, {"samp_10", 0.6284841974233146}, {"samp_11", 0.3145215117356297}, {"samp_12", -1.1068112180260703}, {"samp_13", 1.3963377252823632}, {"samp_14", -0.2823838980859444}, {"samp_15", -0.558194435329677}, {"samp_16", 0.1392264405699938}, {"samp_17", -0.0438635715836751}, {"samp_18", -0.771808814470598}, {"samp_19", 0.1250825339605337}, {"samp_20", -0.2716040961879584}, {"samp_21", -1.047786218030466}, {"samp_22", -0.1704325268713847}, {"samp_23", -0.9438553024077296}, {"samp_24", 0.8686440391131466}, {"samp_25", 0.2876934951652874}, {"samp_26", -0.3482682767958867}, {"samp_27", -1.3536536958283714}, {"samp_28", -0.2267703248905159}, {"samp_29", -0.5440644222996157}, {"samp_30", -0.6665061730486481}, {"samp_31", 0.7931686533732843}, {"samp_32", 1.9614376254134092}, {"samp_33", 1.1136453586802324}, {"samp_34", -0.0521975812947666}, {"samp_35", -1.0451270521745997}, {"samp_36", -0.2347333711314685}, {"samp_37", 1.3508511460671444}, {"samp_38", -0.011170077100581}, {"samp_39", -0.4107230903752075}, {"samp_40", -0.6720002184300308}, {"samp_41", 1.297498220762568}, {"samp_42", 1.480439221625658}, {"samp_43", 1.587266601961687}, {"samp_44", -0.43154082762861}, {"samp_45", -0.124946768381228}, {"samp_46", -0.5716035657418368}, {"samp_47", 1.4946746219271034}, {"samp_48", 0.5583870742497118}, {"samp_49", 0.1408850155465552}, {"samp_50", 0.3141263640698458}, {"samp_51", 0.4196078443696668}, {"samp_52", -0.1261106012061604}, {"samp_53", -0.3641233014243498}, {"samp_54", 0.7507589710512131}, {"samp_55", -0.0567228453818384}, {"samp_56", -0.4741507548094357}, {"samp_57", -0.8491020519594705}, {"samp_58", 2.7313656687619328}, {"samp_59", -0.4560522222831544}, {"samp_60", -0.0752689603324389}, {"samp_61", -1.0060937867546338}, {"samp_62", 0.4260155018401134}, {"samp_63", -1.1297739320146871}, {"samp_64", 1.7590936905504837}, {"samp_65", 0.2354574652735774}, {"samp_66", -0.050520555681712}, {"samp_67", 1.5859987314434714}, {"samp_68", 0.5636372775780332}, {"samp_69", 1.0137867543823134}, {"samp_70", 1.9486591417126584}, {"samp_71", -1.5935914299194864}, {"samp_72", -0.5926415913863375}, {"samp_73", -0.4569762971672537}, {"samp_74", 2.7723010818915244}, {"samp_75", -0.1716628977588499}, {"samp_76", 0.7611687257201428}, {"samp_77", 2.0044673368719863}, {"samp_78", 0.6276504133118753}, {"samp_79", 1.1218927699673484}, {"samp_80", -0.2610728545175861}, {"samp_81", -0.3911505741861616}, {"samp_82", 1.088048360272097}, {"samp_83", 0.6142246812508151}, {"samp_84", 0.9498220385758566}, {"samp_85", 2.065834967492888}, {"samp_86", -0.748121101880094}, {"samp_87", -0.7771457633939725}, {"samp_88", 0.0806188111998186}, {"samp_89", 0.0869785096554799}, {"samp_90", -0.6738965506510948}, {"samp_91", -0.9240704235445832}, {"samp_92", -1.5011508275540613}, {"samp_93", -0.3101165016849668}, {"samp_94", -0.3143913696715405}, {"samp_95", 0.9726383793265724}, {"samp_96", -0.3167441304418599}, {"samp_97", -1.46024840779778}, {"samp_98", -0.2124398715033012}, {"samp_99", 1.1463691053551306}, {"samp_100", 1.0080572191237915}, {"samp_101", -1.9058982512107387}, {"samp_102", -1.5915277440876856}, {"samp_103", 0.1836136056472547}, {"samp_104", -0.1057420373846523}, {"samp_105", 1.1279281246400856}, {"samp_106", -0.7403978824168426}, {"samp_107", 1.834372940952988}, {"samp_108", -1.777170839917622}, {"samp_109", -0.5464519273378773}, {"samp_110", 0.8635720970977028}, {"samp_111", 2.031416019299819}, {"samp_112", -1.18226854296634}, {"samp_113", 0.7549673971543053}, {"samp_114", -0.6598054764435292}, {"samp_115", -0.009874477630342}, {"samp_116", 0.2626220002134599}, {"samp_117", -0.6666369184299836}, {"samp_118", 0.3953850375841815}, {"samp_119", -0.4584701771225993}, {"samp_120", 0.6179104479511509}, {"samp_121", 0.2285048560400702}, {"samp_122", -0.9394192352514292}, {"samp_123", 2.148094628735728}, {"samp_124", 0.7965759792163076}, {"samp_125", 0.1699916199835299}, {"samp_126", -0.0341993718399194}, {"samp_127", -0.402811146381787}, {"samp_128", -0.0535169283830135}, {"samp_129", -0.3973167869567883}, {"samp_130", -0.6575337119025689}, {"samp_131", -2.009467793853723}, {"samp_132", -0.3808113914656987}, {"samp_133", 1.3430580946431414}, {"samp_134", -1.8274960795777828}, {"samp_135", -0.1645904597280621}, {"samp_136", -0.7794574504423725}, {"samp_137", -0.7499621667815177}, {"samp_138", -0.6691059357618817}, {"samp_139", 1.1003167907064986}, {"samp_140", -1.765345994550147}, {"samp_141", 0.3642407343115377}, {"samp_142", 1.5168405328197694}, {"samp_143", -0.8619486537372909}, {"samp_144", 0.2952291001344954}, {"samp_145", 0.447692200860079}, {"samp_146", -0.2911989858479019}, {"samp_147", 0.0506591996143556}, {"samp_148", 0.488596743496089}, {"samp_149", 1.7290125554027196}, {"samp_150", 1.1946171439814632}, {"samp_151", 1.2988623783285556}, {"samp_152", 0.0867190261474712}, {"samp_153", -0.7025826686380985}, {"samp_154", -0.3544766041527286}, {"samp_155", 0.917333436981342}, {"samp_156", -0.4413346981409898}, {"samp_157", -0.7683755023231721}, {"samp_158", 0.3234661449712775}, {"samp_159", -0.4539368546648434}, {"samp_160", -0.784089724347429}, {"samp_161", -0.7687203152342841}, {"samp_162", 1.1314249083383745}, {"samp_163", -0.8889437662897639}, {"samp_164", -1.314903583922408}, {"samp_165", -0.4657846417650567}, {"samp_166", -0.2405106395331935}, {"samp_167", -0.3058060552938739}, {"samp_168", 0.6381259254324554}, {"samp_169", 0.6225030864115789}, {"samp_170", -2.344837950301869}, {"samp_171", -0.2480935646126831}, {"samp_172", -1.298100353981568}, {"samp_173", 0.6119151305484846}, {"samp_174", 0.2017227407568299}, {"samp_175", 0.061575903897426}, {"samp_176", -0.6839266134664457}, {"samp_177", -0.3321657606164863}, {"samp_178", 2.1750593533475246}, {"samp_179", -0.0116819222190055}, {"samp_180", 0.7175747884700769}, {"samp_181", -0.2205145653454024}, {"samp_182", 0.2061858355317392}, {"samp_183", 1.6330936136501812}, {"samp_184", 0.1045697697817224}, {"samp_185", 1.7365856332825265}, {"samp_186", 1.5556678517730795}, {"samp_187", -0.421068358575968}, {"samp_188", -0.0784132491093507}, {"samp_189", 0.3442551443743125}, {"samp_190", 0.3553365177784037}, {"samp_191", -1.459766662405149}, {"samp_192", -0.1960929078969019}, {"samp_193", -0.8259699762547229}, {"samp_194", 0.7391392928575113}, {"samp_195", 1.0491338161727906}, {"samp_196", 0.8893053436416344}, {"samp_197", -1.04493828507472}, {"samp_198", -1.0227353427356485}, {"samp_199", 0.2679115529887281}};
    
    // Example genotype data for a few SNPs
    // Each SNP has genotype values (0,1,2) for each sample
    std::unordered_map<std::string, std::vector<int>> genotype_data = {{"samp_0", {1,1}}, {"samp_100", {2,0}}, {"samp_101", {1,1}}, {"samp_102", {2,0}}, {"samp_103", {2,0}}, {"samp_104", {1,1}}, {"samp_105", {1,1}}, {"samp_106", {0,2}}, {"samp_107", {2,0}}, {"samp_108", {1,1}}, {"samp_109", {1,1}}, {"samp_10", {2,0}}, {"samp_110", {2,0}}, {"samp_111", {2,0}}, {"samp_112", {0,2}}, {"samp_113", {1,1}}, {"samp_114", {1,1}}, {"samp_115", {2,0}}, {"samp_116", {2,0}}, {"samp_117", {0,2}}, {"samp_118", {1,1}}, {"samp_119", {2,0}}, {"samp_11", {2,0}}, {"samp_120", {1,1}}, {"samp_121", {2,0}}, {"samp_122", {2,0}}, {"samp_123", {2,0}}, {"samp_124", {2,0}}, {"samp_125", {1,1}}, {"samp_126", {1,1}}, {"samp_127", {1,1}}, {"samp_128", {1,1}}, {"samp_129", {2,0}}, {"samp_12", {2,0}}, {"samp_130", {2,0}}, {"samp_131", {1,1}}, {"samp_132", {1,1}}, {"samp_133", {2,0}}, {"samp_134", {0,2}}, {"samp_135", {2,0}}, {"samp_136", {1,1}}, {"samp_137", {1,1}}, {"samp_138", {0,2}}, {"samp_139", {2,0}}, {"samp_13", {2,0}}, {"samp_140", {1,1}}, {"samp_141", {2,0}}, {"samp_142", {2,0}}, {"samp_143", {0,2}}, {"samp_144", {2,0}}, {"samp_145", {2,0}}, {"samp_146", {2,0}}, {"samp_147", {1,1}}, {"samp_148", {2,0}}, {"samp_149", {2,0}}, {"samp_14", {2,0}}, {"samp_150", {1,1}}, {"samp_151", {2,0}}, {"samp_152", {1,1}}, {"samp_153", {1,1}}, {"samp_154", {2,0}}, {"samp_155", {2,0}}, {"samp_156", {1,1}}, {"samp_157", {1,1}}, {"samp_158", {2,0}}, {"samp_159", {2,0}}, {"samp_15", {1,1}}, {"samp_160", {1,1}}, {"samp_161", {1,1}}, {"samp_162", {2,0}}, {"samp_163", {0,2}}, {"samp_164", {0,2}}, {"samp_165", {2,0}}, {"samp_166", {2,0}}, {"samp_167", {1,1}}, {"samp_168", {2,0}}, {"samp_169", {1,1}}, {"samp_16", {1,1}}, {"samp_170", {2,0}}, {"samp_171", {2,0}}, {"samp_172", {2,0}}, {"samp_173", {1,1}}, {"samp_174", {0,2}}, {"samp_175", {2,0}}, {"samp_176", {1,1}}, {"samp_177", {2,0}}, {"samp_178", {2,0}}, {"samp_179", {0,2}}, {"samp_17", {1,1}}, {"samp_180", {2,0}}, {"samp_181", {2,0}}, {"samp_182", {1,1}}, {"samp_183", {2,0}}, {"samp_184", {2,0}}, {"samp_185", {2,0}}, {"samp_186", {1,1}}, {"samp_187", {2,0}}, {"samp_188", {1,1}}, {"samp_189", {2,0}}, {"samp_18", {2,0}}, {"samp_190", {2,0}}, {"samp_191", {0,2}}, {"samp_192", {2,0}}, {"samp_193", {1,1}}, {"samp_194", {2,0}}, {"samp_195", {2,0}}, {"samp_196", {2,0}}, {"samp_197", {2,0}}, {"samp_198", {2,0}}, {"samp_199", {1,1}}, {"samp_19", {1,1}}, {"samp_1", {0,2}}, {"samp_20", {1,1}}, {"samp_21", {1,1}}, {"samp_22", {2,0}}, {"samp_23", {2,0}}, {"samp_24", {2,0}}, {"samp_25", {2,0}}, {"samp_26", {2,0}}, {"samp_27", {1,1}}, {"samp_28", {1,1}}, {"samp_29", {1,1}}, {"samp_2", {2,0}}, {"samp_30", {0,2}}, {"samp_31", {1,1}}, {"samp_32", {2,0}}, {"samp_33", {2,0}}, {"samp_34", {2,0}}, {"samp_35", {1,1}}, {"samp_36", {1,1}}, {"samp_37", {2,0}}, {"samp_38", {1,1}}, {"samp_39", {2,0}}, {"samp_3", {2,0}}, {"samp_40", {2,0}}, {"samp_41", {2,0}}, {"samp_42", {2,0}}, {"samp_43", {2,0}}, {"samp_44", {1,1}}, {"samp_45", {2,0}}, {"samp_46", {1,1}}, {"samp_47", {2,0}}, {"samp_48", {1,1}}, {"samp_49", {1,1}}, {"samp_4", {2,0}}, {"samp_50", {2,0}}, {"samp_51", {2,0}}, {"samp_52", {2,0}}, {"samp_53", {1,1}}, {"samp_54", {2,0}}, {"samp_55", {2,0}}, {"samp_56", {1,1}}, {"samp_57", {1,1}}, {"samp_58", {2,0}}, {"samp_59", {2,0}}, {"samp_5", {2,0}}, {"samp_60", {2,0}}, {"samp_61", {1,1}}, {"samp_62", {1,1}}, {"samp_63", {0,2}}, {"samp_64", {2,0}}, {"samp_65", {2,0}}, {"samp_66", {2,0}}, {"samp_67", {2,0}}, {"samp_68", {2,0}}, {"samp_69", {2,0}}, {"samp_6", {1,1}}, {"samp_70", {2,0}}, {"samp_71", {1,1}}, {"samp_72", {0,2}}, {"samp_73", {2,0}}, {"samp_74", {2,0}}, {"samp_75", {0,2}}, {"samp_76", {1,1}}, {"samp_77", {2,0}}, {"samp_78", {2,0}}, {"samp_79", {2,0}}, {"samp_7", {1,1}}, {"samp_80", {2,0}}, {"samp_81", {2,0}}, {"samp_82", {2,0}}, {"samp_83", {2,0}}, {"samp_84", {1,1}}, {"samp_85", {2,0}}, {"samp_86", {1,1}}, {"samp_87", {2,0}}, {"samp_88", {1,1}}, {"samp_89", {1,1}}, {"samp_8", {2,0}}, {"samp_90", {0,2}}, {"samp_91", {2,0}}, {"samp_92", {1,1}}, {"samp_93", {0,2}}, {"samp_94", {2,0}}, {"samp_95", {2,0}}, {"samp_96", {1,1}}, {"samp_97", {1,1}}, {"samp_98", {2,0}}, {"samp_99", {2,0}}, {"samp_9", {2,0}}};
    
    // Calculate p-values
    linear_regression(genotype_data, phenotype);

    return 0;
}